version: 2

jobs:

  build:
    working_directory: /go/src/github.com/FactomProject/factomd
    docker:
      - image: circleci/golang:1.10

    steps:
      - checkout

      - restore_cache:
          keys:
            - v2-factomd-go-build-cache-{{ checksum "glide.lock" }}

      - run:
          name: Get glide
          command: |
            go get -v github.com/Masterminds/glide
            cd $GOPATH/src/github.com/Masterminds/glide
            git checkout tags/v0.13.1
            go install
      - run:
          name: Get goveralls
          command: |
            go get github.com/mattn/goveralls
      - run:
          name: Get the dependencies
          command: |
            glide install
      - run:
          name: Build and install the executable
          command: go install -v && cp -r $GOPATH/ /tmp

      - persist_to_workspace:
          root: /tmp
          paths: go

      - save_cache:
          key: v2-factomd-go-build-cache-{{ checksum "glide.lock" }}
          paths:
            - vendor

  test:
    working_directory: /tmp
    docker:
      - image: circleci/golang:1.10

    parallelism: 8

    steps:
      - attach_workspace:
          at: /tmp

      - run:
          name: Run Tests!
          no_output_timeout: 2400
          command: |
            export PATH="/tmp/go/bin:$PATH"
            export GOPATH=/tmp/go
            cd /tmp/go/src/github.com/FactomProject/factomd/
            ./test.sh

  coveralls:
    working_directory: /tmp
    docker:
      - image: circleci/golang:1.10

    steps:
      - attach_workspace:
          at: /tmp

      - run:
          name: Go Test with Coverage
          no_output_timeout: 2400
          command: |
            export PATH="/tmp/go/bin:$PATH"
            export GOPATH=/tmp/go
            cd /tmp/go/src/github.com/FactomProject/factomd/
            go test $(glide nv | grep -v Utilities | grep -v longTest | grep -v peerTest | grep -v simTest | grep '...') -vet=off -v -cover -coverprofile=coverage.out
            goveralls -coverprofile=coverage.out -service=circle-ci -repotoken=$COVERALLS_TOKEN
            exit 0 # coverage should never fail


  # Docker builds
  docker_build:
    working_directory: /go/src/github.com/FactomProject/factomd

    docker:
      - image: factominc/elixir_python

    steps:
      - checkout

      - setup_remote_docker:
          version: 18.03.1-ce

      # The main (only) thing we care about is caching the /vendor dir.
      #   Hence, checksumming glide.lock
      - restore_cache:
          keys:
            - v6-factomd-cache-{{ checksum "glide.lock" }}

      # Load the images if the cache hit
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /images/factomd-alpine.tar | true
            docker load -i /images/factomd.tar | true

      # Build the containers
      - run:
          name: Build the baseline images
          command: |
            docker build -t factomd-alpine -f Dockerfile.alpine .
            docker build -t factomd -f Dockerfile .

      # Push, depending on branch/tag
      - run:
          name: Push  special branches to DockerHub
          command: |

           # Login to DockerHub
            docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

            # If there is a tag, use it
            if [ "$CIRCLE_TAG" != "" ]; then
              docker tag factomd factominc/factomd:${CIRCLE_TAG}
              docker push factominc/factomd:${CIRCLE_TAG}
              docker tag factomd-alpine factominc/factomd:${CIRCLE_TAG}-alpine
              docker push factominc/factomd:${CIRCLE_TAG}-alpine
            fi

            # Legacy master/develop images.  Continue building and pushing until we know they aren't being used
            if [ "${CIRCLE_BRANCH}" == "master" ]; then

              # Tag master as latest
              docker tag factomd factominc/factomd:latest
              docker push factominc/factomd:latest
              docker tag factomd-alpine factominc/factomd:alpine
              docker push factominc/factomd:alpine
            fi

            if [ "${CIRCLE_BRANCH}" == "develop" ]; then

              # Tag develop as develop anyhow
              docker tag factomd factominc/factomd:develop
              docker push factominc/factomd:develop
              docker tag factomd-alpine factominc/factomd:alpine-develop
              docker push factominc/factomd:alpine-develop
            fi
            
            # Push alternate named versions of the master and develop branches
            if [ "${CIRCLE_BRANCH}" == "master" ]; then

              # Tag master as master, although it is alredy pushed as the latest
              # using the latest branch is frowned upon by some docer experts, so explicitly push master
              docker tag factomd factominc/factomd:master
              docker push factominc/factomd:master
              docker tag factomd-alpine factominc/factomd:master-alpine
              docker push factominc/factomd:master-alpine
            fi

            if [ "${CIRCLE_BRANCH}" == "develop" ]; then

              # push develop on ansible again, but with the name concatenated like the rest of the tags 
              docker tag factomd-alpine factominc/factomd:develop-alpine
              docker push factominc/factomd:develop-alpine
            fi
            
            #push special branches if they exist
            
            if [ "${CIRCLE_BRANCH}" == "master-staging" ]; then

              # push a branch that can be used to test a pre-release version of master just before it is released.
              docker tag factomd factominc/factomd:master-staging
              docker push factominc/factomd:master-staging
              docker tag factomd-alpine factominc/factomd:master-staging-alpine
              docker push factominc/factomd:master-staging-alpine
            fi
            
            if [ "${CIRCLE_BRANCH}" == "community-testnet-staging" ]; then
              docker tag factomd factominc/factomd:community-testnet-staging
              docker push factominc/factomd:community-testnet-staging
              docker tag factomd-alpine factominc/factomd:community-testnet-staging-alpine
              docker push factominc/factomd:community-testnet-staging-alpine
            fi
            
            if [ "${CIRCLE_BRANCH}" == "community-testnet" ]; then
              docker tag factomd factominc/factomd:community-testnet
              docker push factominc/factomd:community-testnet
              docker tag factomd-alpine factominc/factomd:community-testnet-alpine
              docker push factominc/factomd:community-testnet-alpine
            fi

            if [ "${CIRCLE_BRANCH}" == "experimental1" ]; then
              docker tag factomd factominc/factomd:experimental1
              docker push factominc/factomd:experimental1
              docker tag factomd-alpine factominc/factomd:experimental1-alpine
              docker push factominc/factomd:experimental1-alpine
            fi
            
            if [ "${CIRCLE_BRANCH}" == "experimental2" ]; then
              docker tag factomd factominc/factomd:experimental2
              docker push factominc/factomd:experimental2
              docker tag factomd-alpine factominc/factomd:experimental2-alpine
              docker push factominc/factomd:experimental2-alpine
            fi
            
            if [ "${CIRCLE_BRANCH}" == "qa1" ]; then
              docker tag factomd factominc/factomd:qa1
              docker push factominc/factomd:qa1
              docker tag factomd-alpine factominc/factomd:qa1-alpine
              docker push factominc/factomd:qa1-alpine
            fi

            if [ "${CIRCLE_BRANCH}" == "qa2" ]; then
              docker tag factomd factominc/factomd:qa2
              docker push factominc/factomd:qa2
              docker tag factomd-alpine factominc/factomd:qa2-alpine
              docker push factominc/factomd:qa2-alpine
            fi
            
            if [ "${CIRCLE_BRANCH}" == "qa3" ]; then
              docker tag factomd factominc/factomd:qa3
              docker push factominc/factomd:qa3
              docker tag factomd-alpine factominc/factomd:qa3-alpine
              docker push factominc/factomd:qa3-alpine
            fi
            
            if [ "${CIRCLE_BRANCH}" == "devnet1" ]; then
              docker tag factomd factominc/factomd:devnet1
              docker push factominc/factomd:devnet1
              docker tag factomd-alpine factominc/factomd:devnet1-alpine
              docker push factominc/factomd:devnet1-alpine
            fi
            
            if [ "${CIRCLE_BRANCH}" == "devnet2" ]; then
              docker tag factomd factominc/factomd:devnet2
              docker push factominc/factomd:devnet2
              docker tag factomd-alpine factominc/factomd:devnet2-alpine
              docker push factominc/factomd:devnet2-alpine
            fi
            
            if [ "${CIRCLE_BRANCH}" == "devnet3" ]; then
              docker tag factomd factominc/factomd:devnet3
              docker push factominc/factomd:devnet3
              docker tag factomd-alpine factominc/factomd:devnet3-alpine
              docker push factominc/factomd:devnet3-alpine
            fi
            
            docker logout

      - run:
          name: Push images to AWS ECR
          command: |
            # Login to AWS ECR
            login="$(aws ecr get-login  --no-include-email --region $AWS_REGION)"
            ${login}

            # If there is a tag, use it
            if [ "$CIRCLE_TAG" != "" ]; then
              docker tag factomd ${AWS_REPO_BASE_URI}/factomd:${CIRCLE_TAG}
              docker push ${AWS_REPO_BASE_URI}/factomd:${CIRCLE_TAG}
              docker tag factomd-alpine ${AWS_REPO_BASE_URI}/factomd:${CIRCLE_TAG}-alpine
              docker push ${AWS_REPO_BASE_URI}/factomd:${CIRCLE_TAG}-alpine
            fi

            if [ "${CIRCLE_BRANCH}" == "master" ]; then

              # Tag master as latest
              docker tag factomd ${AWS_REPO_BASE_URI}/factomd:latest
              docker push ${AWS_REPO_BASE_URI}/factomd:latest
              docker tag factomd-alpine ${AWS_REPO_BASE_URI}/factomd:alpine
              docker push ${AWS_REPO_BASE_URI}/factomd:alpine
            fi

            if [ "${CIRCLE_BRANCH}" == "develop" ]; then

              # Tag develop as develop anyhow
              docker tag factomd ${AWS_REPO_BASE_URI}/factomd:develop
              docker push ${AWS_REPO_BASE_URI}/factomd:develop
              docker tag factomd-alpine ${AWS_REPO_BASE_URI}/factomd:alpine-develop
              docker push ${AWS_REPO_BASE_URI}/factomd:alpine-develop
            fi

            docker logout
      - run:
          name: Save the image cache
          command: |
            mkdir -p /images
            docker save -o /images/factomd-alpine.tar factomd-alpine $(docker history -q factomd-alpine |grep -v missing | grep -v none)
            docker save -o /images/factomd.tar factomd $(docker history -q factomd |grep -v missing | grep -v none)

      - save_cache:
          key: v6-factomd-cache-{{ checksum "glide.lock" }}
          paths:
            - /images

# The flow is
#    build
#      |
#      ---------- test
#                   |
#                   ---------- coveralls
#                   |
#                   ---------- docker_build
#
#

workflows:
  version: 2
  commit-workflow:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/
          requires:
            - build
      - coveralls:
          filters:
            tags:
              only: /.*/
          requires:
            - test
      - docker_build:
          filters:
            tags:
              only: /.*/
          context: org-global
          requires:
            - test

  scheduled-workflow:
    triggers:
      - schedule:
          cron: "20 5 * * *"
          filters:
            branches:
              only: develop
    jobs:
      - build
      - test:
          requires:
            - build
      - coveralls:
          requires:
            - test
      - docker_build:
          context: org-global
          requires:
            - test

notify:
  webhooks:
    - url: https://hooks.zapier.com/hooks/catch/2398659/i8hgb6/

