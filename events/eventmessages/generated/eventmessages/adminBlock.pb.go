// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventmessages/adminBlock.proto

package eventmessages

import (
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ====  ADMIN BLOCK STRUCTURES =====
type AdminBlock struct {
	Header               *AdminBlockHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Entries              []*AdminBlockEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	KeyMerkleRoot        []byte             `protobuf:"bytes,3,opt,name=keyMerkleRoot,proto3" json:"keyMerkleRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AdminBlock) Reset()         { *m = AdminBlock{} }
func (m *AdminBlock) String() string { return proto.CompactTextString(m) }
func (*AdminBlock) ProtoMessage()    {}
func (*AdminBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{0}
}
func (m *AdminBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBlock.Merge(m, src)
}
func (m *AdminBlock) XXX_Size() int {
	return m.Size()
}
func (m *AdminBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBlock.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBlock proto.InternalMessageInfo

func (m *AdminBlock) GetHeader() *AdminBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AdminBlock) GetEntries() []*AdminBlockEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AdminBlock) GetKeyMerkleRoot() []byte {
	if m != nil {
		return m.KeyMerkleRoot
	}
	return nil
}

type AdminBlockHeader struct {
	PreviousBackRefHash  []byte   `protobuf:"bytes,1,opt,name=previousBackRefHash,proto3" json:"previousBackRefHash,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	MessageCount         uint32   `protobuf:"varint,3,opt,name=messageCount,proto3" json:"messageCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminBlockHeader) Reset()         { *m = AdminBlockHeader{} }
func (m *AdminBlockHeader) String() string { return proto.CompactTextString(m) }
func (*AdminBlockHeader) ProtoMessage()    {}
func (*AdminBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{1}
}
func (m *AdminBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBlockHeader.Merge(m, src)
}
func (m *AdminBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *AdminBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBlockHeader proto.InternalMessageInfo

func (m *AdminBlockHeader) GetPreviousBackRefHash() []byte {
	if m != nil {
		return m.PreviousBackRefHash
	}
	return nil
}

func (m *AdminBlockHeader) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *AdminBlockHeader) GetMessageCount() uint32 {
	if m != nil {
		return m.MessageCount
	}
	return 0
}

type AdminBlockEntry struct {
	// Types that are valid to be assigned to AdminBlockEntry:
	//	*AdminBlockEntry_AddAuditServer
	//	*AdminBlockEntry_AddEfficiency
	//	*AdminBlockEntry_AddFactoidAddress
	//	*AdminBlockEntry_AddFederatedServer
	//	*AdminBlockEntry_AddFederatedServerBitcoinAnchorKey
	//	*AdminBlockEntry_AddFederatedServerSigningKey
	//	*AdminBlockEntry_AddReplaceMatryoshkaHash
	//	*AdminBlockEntry_CancelCoinbaseDescriptor
	//	*AdminBlockEntry_CoinbaseDescriptor
	//	*AdminBlockEntry_DirectoryBlockSignatureEntry
	//	*AdminBlockEntry_EndOfMinuteEntry
	//	*AdminBlockEntry_ForwardCompatibleEntry
	//	*AdminBlockEntry_IncreaseServerCount
	//	*AdminBlockEntry_RemoveFederatedServer
	//	*AdminBlockEntry_RevealMatryoshkaHash
	//	*AdminBlockEntry_ServerFault
	AdminBlockEntry      isAdminBlockEntry_AdminBlockEntry `protobuf_oneof:"adminBlockEntry"`
	AdminIdType          uint32                            `protobuf:"varint,17,opt,name=adminIdType,proto3" json:"adminIdType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *AdminBlockEntry) Reset()         { *m = AdminBlockEntry{} }
func (m *AdminBlockEntry) String() string { return proto.CompactTextString(m) }
func (*AdminBlockEntry) ProtoMessage()    {}
func (*AdminBlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{2}
}
func (m *AdminBlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminBlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminBlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminBlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminBlockEntry.Merge(m, src)
}
func (m *AdminBlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *AdminBlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminBlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_AdminBlockEntry proto.InternalMessageInfo

type isAdminBlockEntry_AdminBlockEntry interface {
	isAdminBlockEntry_AdminBlockEntry()
	MarshalTo([]byte) (int, error)
	Size() int
}

type AdminBlockEntry_AddAuditServer struct {
	AddAuditServer *AddAuditServer `protobuf:"bytes,1,opt,name=addAuditServer,proto3,oneof" json:"addAuditServer,omitempty"`
}
type AdminBlockEntry_AddEfficiency struct {
	AddEfficiency *AddEfficiency `protobuf:"bytes,2,opt,name=addEfficiency,proto3,oneof" json:"addEfficiency,omitempty"`
}
type AdminBlockEntry_AddFactoidAddress struct {
	AddFactoidAddress *AddFactoidAddress `protobuf:"bytes,3,opt,name=addFactoidAddress,proto3,oneof" json:"addFactoidAddress,omitempty"`
}
type AdminBlockEntry_AddFederatedServer struct {
	AddFederatedServer *AddFederatedServer `protobuf:"bytes,4,opt,name=addFederatedServer,proto3,oneof" json:"addFederatedServer,omitempty"`
}
type AdminBlockEntry_AddFederatedServerBitcoinAnchorKey struct {
	AddFederatedServerBitcoinAnchorKey *AddFederatedServerBitcoinAnchorKey `protobuf:"bytes,5,opt,name=addFederatedServerBitcoinAnchorKey,proto3,oneof" json:"addFederatedServerBitcoinAnchorKey,omitempty"`
}
type AdminBlockEntry_AddFederatedServerSigningKey struct {
	AddFederatedServerSigningKey *AddFederatedServerSigningKey `protobuf:"bytes,6,opt,name=addFederatedServerSigningKey,proto3,oneof" json:"addFederatedServerSigningKey,omitempty"`
}
type AdminBlockEntry_AddReplaceMatryoshkaHash struct {
	AddReplaceMatryoshkaHash *AddReplaceMatryoshkaHash `protobuf:"bytes,7,opt,name=addReplaceMatryoshkaHash,proto3,oneof" json:"addReplaceMatryoshkaHash,omitempty"`
}
type AdminBlockEntry_CancelCoinbaseDescriptor struct {
	CancelCoinbaseDescriptor *CancelCoinbaseDescriptor `protobuf:"bytes,8,opt,name=cancelCoinbaseDescriptor,proto3,oneof" json:"cancelCoinbaseDescriptor,omitempty"`
}
type AdminBlockEntry_CoinbaseDescriptor struct {
	CoinbaseDescriptor *CoinbaseDescriptor `protobuf:"bytes,9,opt,name=coinbaseDescriptor,proto3,oneof" json:"coinbaseDescriptor,omitempty"`
}
type AdminBlockEntry_DirectoryBlockSignatureEntry struct {
	DirectoryBlockSignatureEntry *DirectoryBlockSignatureEntry `protobuf:"bytes,10,opt,name=directoryBlockSignatureEntry,proto3,oneof" json:"directoryBlockSignatureEntry,omitempty"`
}
type AdminBlockEntry_EndOfMinuteEntry struct {
	EndOfMinuteEntry *EndOfMinuteEntry `protobuf:"bytes,11,opt,name=endOfMinuteEntry,proto3,oneof" json:"endOfMinuteEntry,omitempty"`
}
type AdminBlockEntry_ForwardCompatibleEntry struct {
	ForwardCompatibleEntry *ForwardCompatibleEntry `protobuf:"bytes,12,opt,name=forwardCompatibleEntry,proto3,oneof" json:"forwardCompatibleEntry,omitempty"`
}
type AdminBlockEntry_IncreaseServerCount struct {
	IncreaseServerCount *IncreaseServerCount `protobuf:"bytes,13,opt,name=increaseServerCount,proto3,oneof" json:"increaseServerCount,omitempty"`
}
type AdminBlockEntry_RemoveFederatedServer struct {
	RemoveFederatedServer *RemoveFederatedServer `protobuf:"bytes,14,opt,name=removeFederatedServer,proto3,oneof" json:"removeFederatedServer,omitempty"`
}
type AdminBlockEntry_RevealMatryoshkaHash struct {
	RevealMatryoshkaHash *RevealMatryoshkaHash `protobuf:"bytes,15,opt,name=revealMatryoshkaHash,proto3,oneof" json:"revealMatryoshkaHash,omitempty"`
}
type AdminBlockEntry_ServerFault struct {
	ServerFault *ServerFault `protobuf:"bytes,16,opt,name=serverFault,proto3,oneof" json:"serverFault,omitempty"`
}

func (*AdminBlockEntry_AddAuditServer) isAdminBlockEntry_AdminBlockEntry()                     {}
func (*AdminBlockEntry_AddEfficiency) isAdminBlockEntry_AdminBlockEntry()                      {}
func (*AdminBlockEntry_AddFactoidAddress) isAdminBlockEntry_AdminBlockEntry()                  {}
func (*AdminBlockEntry_AddFederatedServer) isAdminBlockEntry_AdminBlockEntry()                 {}
func (*AdminBlockEntry_AddFederatedServerBitcoinAnchorKey) isAdminBlockEntry_AdminBlockEntry() {}
func (*AdminBlockEntry_AddFederatedServerSigningKey) isAdminBlockEntry_AdminBlockEntry()       {}
func (*AdminBlockEntry_AddReplaceMatryoshkaHash) isAdminBlockEntry_AdminBlockEntry()           {}
func (*AdminBlockEntry_CancelCoinbaseDescriptor) isAdminBlockEntry_AdminBlockEntry()           {}
func (*AdminBlockEntry_CoinbaseDescriptor) isAdminBlockEntry_AdminBlockEntry()                 {}
func (*AdminBlockEntry_DirectoryBlockSignatureEntry) isAdminBlockEntry_AdminBlockEntry()       {}
func (*AdminBlockEntry_EndOfMinuteEntry) isAdminBlockEntry_AdminBlockEntry()                   {}
func (*AdminBlockEntry_ForwardCompatibleEntry) isAdminBlockEntry_AdminBlockEntry()             {}
func (*AdminBlockEntry_IncreaseServerCount) isAdminBlockEntry_AdminBlockEntry()                {}
func (*AdminBlockEntry_RemoveFederatedServer) isAdminBlockEntry_AdminBlockEntry()              {}
func (*AdminBlockEntry_RevealMatryoshkaHash) isAdminBlockEntry_AdminBlockEntry()               {}
func (*AdminBlockEntry_ServerFault) isAdminBlockEntry_AdminBlockEntry()                        {}

func (m *AdminBlockEntry) GetAdminBlockEntry() isAdminBlockEntry_AdminBlockEntry {
	if m != nil {
		return m.AdminBlockEntry
	}
	return nil
}

func (m *AdminBlockEntry) GetAddAuditServer() *AddAuditServer {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_AddAuditServer); ok {
		return x.AddAuditServer
	}
	return nil
}

func (m *AdminBlockEntry) GetAddEfficiency() *AddEfficiency {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_AddEfficiency); ok {
		return x.AddEfficiency
	}
	return nil
}

func (m *AdminBlockEntry) GetAddFactoidAddress() *AddFactoidAddress {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_AddFactoidAddress); ok {
		return x.AddFactoidAddress
	}
	return nil
}

func (m *AdminBlockEntry) GetAddFederatedServer() *AddFederatedServer {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_AddFederatedServer); ok {
		return x.AddFederatedServer
	}
	return nil
}

func (m *AdminBlockEntry) GetAddFederatedServerBitcoinAnchorKey() *AddFederatedServerBitcoinAnchorKey {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_AddFederatedServerBitcoinAnchorKey); ok {
		return x.AddFederatedServerBitcoinAnchorKey
	}
	return nil
}

func (m *AdminBlockEntry) GetAddFederatedServerSigningKey() *AddFederatedServerSigningKey {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_AddFederatedServerSigningKey); ok {
		return x.AddFederatedServerSigningKey
	}
	return nil
}

func (m *AdminBlockEntry) GetAddReplaceMatryoshkaHash() *AddReplaceMatryoshkaHash {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_AddReplaceMatryoshkaHash); ok {
		return x.AddReplaceMatryoshkaHash
	}
	return nil
}

func (m *AdminBlockEntry) GetCancelCoinbaseDescriptor() *CancelCoinbaseDescriptor {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_CancelCoinbaseDescriptor); ok {
		return x.CancelCoinbaseDescriptor
	}
	return nil
}

func (m *AdminBlockEntry) GetCoinbaseDescriptor() *CoinbaseDescriptor {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_CoinbaseDescriptor); ok {
		return x.CoinbaseDescriptor
	}
	return nil
}

func (m *AdminBlockEntry) GetDirectoryBlockSignatureEntry() *DirectoryBlockSignatureEntry {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_DirectoryBlockSignatureEntry); ok {
		return x.DirectoryBlockSignatureEntry
	}
	return nil
}

func (m *AdminBlockEntry) GetEndOfMinuteEntry() *EndOfMinuteEntry {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_EndOfMinuteEntry); ok {
		return x.EndOfMinuteEntry
	}
	return nil
}

func (m *AdminBlockEntry) GetForwardCompatibleEntry() *ForwardCompatibleEntry {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_ForwardCompatibleEntry); ok {
		return x.ForwardCompatibleEntry
	}
	return nil
}

func (m *AdminBlockEntry) GetIncreaseServerCount() *IncreaseServerCount {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_IncreaseServerCount); ok {
		return x.IncreaseServerCount
	}
	return nil
}

func (m *AdminBlockEntry) GetRemoveFederatedServer() *RemoveFederatedServer {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_RemoveFederatedServer); ok {
		return x.RemoveFederatedServer
	}
	return nil
}

func (m *AdminBlockEntry) GetRevealMatryoshkaHash() *RevealMatryoshkaHash {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_RevealMatryoshkaHash); ok {
		return x.RevealMatryoshkaHash
	}
	return nil
}

func (m *AdminBlockEntry) GetServerFault() *ServerFault {
	if x, ok := m.GetAdminBlockEntry().(*AdminBlockEntry_ServerFault); ok {
		return x.ServerFault
	}
	return nil
}

func (m *AdminBlockEntry) GetAdminIdType() uint32 {
	if m != nil {
		return m.AdminIdType
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AdminBlockEntry) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AdminBlockEntry_AddAuditServer)(nil),
		(*AdminBlockEntry_AddEfficiency)(nil),
		(*AdminBlockEntry_AddFactoidAddress)(nil),
		(*AdminBlockEntry_AddFederatedServer)(nil),
		(*AdminBlockEntry_AddFederatedServerBitcoinAnchorKey)(nil),
		(*AdminBlockEntry_AddFederatedServerSigningKey)(nil),
		(*AdminBlockEntry_AddReplaceMatryoshkaHash)(nil),
		(*AdminBlockEntry_CancelCoinbaseDescriptor)(nil),
		(*AdminBlockEntry_CoinbaseDescriptor)(nil),
		(*AdminBlockEntry_DirectoryBlockSignatureEntry)(nil),
		(*AdminBlockEntry_EndOfMinuteEntry)(nil),
		(*AdminBlockEntry_ForwardCompatibleEntry)(nil),
		(*AdminBlockEntry_IncreaseServerCount)(nil),
		(*AdminBlockEntry_RemoveFederatedServer)(nil),
		(*AdminBlockEntry_RevealMatryoshkaHash)(nil),
		(*AdminBlockEntry_ServerFault)(nil),
	}
}

type AddAuditServer struct {
	IdentityChainID      []byte   `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddAuditServer) Reset()         { *m = AddAuditServer{} }
func (m *AddAuditServer) String() string { return proto.CompactTextString(m) }
func (*AddAuditServer) ProtoMessage()    {}
func (*AddAuditServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{3}
}
func (m *AddAuditServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAuditServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAuditServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAuditServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAuditServer.Merge(m, src)
}
func (m *AddAuditServer) XXX_Size() int {
	return m.Size()
}
func (m *AddAuditServer) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAuditServer.DiscardUnknown(m)
}

var xxx_messageInfo_AddAuditServer proto.InternalMessageInfo

func (m *AddAuditServer) GetIdentityChainID() []byte {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddAuditServer) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type AddEfficiency struct {
	IdentityChainID      []byte   `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	Efficiency           uint32   `protobuf:"varint,2,opt,name=efficiency,proto3" json:"efficiency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddEfficiency) Reset()         { *m = AddEfficiency{} }
func (m *AddEfficiency) String() string { return proto.CompactTextString(m) }
func (*AddEfficiency) ProtoMessage()    {}
func (*AddEfficiency) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{4}
}
func (m *AddEfficiency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddEfficiency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddEfficiency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddEfficiency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEfficiency.Merge(m, src)
}
func (m *AddEfficiency) XXX_Size() int {
	return m.Size()
}
func (m *AddEfficiency) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEfficiency.DiscardUnknown(m)
}

var xxx_messageInfo_AddEfficiency proto.InternalMessageInfo

func (m *AddEfficiency) GetIdentityChainID() []byte {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddEfficiency) GetEfficiency() uint32 {
	if m != nil {
		return m.Efficiency
	}
	return 0
}

type AddFactoidAddress struct {
	IdentityChainID      []byte   `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	Address              []byte   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFactoidAddress) Reset()         { *m = AddFactoidAddress{} }
func (m *AddFactoidAddress) String() string { return proto.CompactTextString(m) }
func (*AddFactoidAddress) ProtoMessage()    {}
func (*AddFactoidAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{5}
}
func (m *AddFactoidAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFactoidAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFactoidAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFactoidAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFactoidAddress.Merge(m, src)
}
func (m *AddFactoidAddress) XXX_Size() int {
	return m.Size()
}
func (m *AddFactoidAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFactoidAddress.DiscardUnknown(m)
}

var xxx_messageInfo_AddFactoidAddress proto.InternalMessageInfo

func (m *AddFactoidAddress) GetIdentityChainID() []byte {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddFactoidAddress) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type AddFederatedServer struct {
	IdentityChainID      []byte   `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFederatedServer) Reset()         { *m = AddFederatedServer{} }
func (m *AddFederatedServer) String() string { return proto.CompactTextString(m) }
func (*AddFederatedServer) ProtoMessage()    {}
func (*AddFederatedServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{6}
}
func (m *AddFederatedServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFederatedServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFederatedServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFederatedServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFederatedServer.Merge(m, src)
}
func (m *AddFederatedServer) XXX_Size() int {
	return m.Size()
}
func (m *AddFederatedServer) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFederatedServer.DiscardUnknown(m)
}

var xxx_messageInfo_AddFederatedServer proto.InternalMessageInfo

func (m *AddFederatedServer) GetIdentityChainID() []byte {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddFederatedServer) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type AddFederatedServerBitcoinAnchorKey struct {
	IdentityChainID      []byte   `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	KeyPriority          uint32   `protobuf:"varint,2,opt,name=keyPriority,proto3" json:"keyPriority,omitempty"`
	KeyType              uint32   `protobuf:"varint,3,opt,name=keyType,proto3" json:"keyType,omitempty"`
	EcdsaPublicKey       []byte   `protobuf:"bytes,4,opt,name=ecdsaPublicKey,proto3" json:"ecdsaPublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFederatedServerBitcoinAnchorKey) Reset()         { *m = AddFederatedServerBitcoinAnchorKey{} }
func (m *AddFederatedServerBitcoinAnchorKey) String() string { return proto.CompactTextString(m) }
func (*AddFederatedServerBitcoinAnchorKey) ProtoMessage()    {}
func (*AddFederatedServerBitcoinAnchorKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{7}
}
func (m *AddFederatedServerBitcoinAnchorKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFederatedServerBitcoinAnchorKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFederatedServerBitcoinAnchorKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFederatedServerBitcoinAnchorKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFederatedServerBitcoinAnchorKey.Merge(m, src)
}
func (m *AddFederatedServerBitcoinAnchorKey) XXX_Size() int {
	return m.Size()
}
func (m *AddFederatedServerBitcoinAnchorKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFederatedServerBitcoinAnchorKey.DiscardUnknown(m)
}

var xxx_messageInfo_AddFederatedServerBitcoinAnchorKey proto.InternalMessageInfo

func (m *AddFederatedServerBitcoinAnchorKey) GetIdentityChainID() []byte {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddFederatedServerBitcoinAnchorKey) GetKeyPriority() uint32 {
	if m != nil {
		return m.KeyPriority
	}
	return 0
}

func (m *AddFederatedServerBitcoinAnchorKey) GetKeyType() uint32 {
	if m != nil {
		return m.KeyType
	}
	return 0
}

func (m *AddFederatedServerBitcoinAnchorKey) GetEcdsaPublicKey() []byte {
	if m != nil {
		return m.EcdsaPublicKey
	}
	return nil
}

type AddFederatedServerSigningKey struct {
	IdentityChainID      []byte   `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	KeyPriority          uint32   `protobuf:"varint,2,opt,name=keyPriority,proto3" json:"keyPriority,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,3,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFederatedServerSigningKey) Reset()         { *m = AddFederatedServerSigningKey{} }
func (m *AddFederatedServerSigningKey) String() string { return proto.CompactTextString(m) }
func (*AddFederatedServerSigningKey) ProtoMessage()    {}
func (*AddFederatedServerSigningKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{8}
}
func (m *AddFederatedServerSigningKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFederatedServerSigningKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFederatedServerSigningKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFederatedServerSigningKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFederatedServerSigningKey.Merge(m, src)
}
func (m *AddFederatedServerSigningKey) XXX_Size() int {
	return m.Size()
}
func (m *AddFederatedServerSigningKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFederatedServerSigningKey.DiscardUnknown(m)
}

var xxx_messageInfo_AddFederatedServerSigningKey proto.InternalMessageInfo

func (m *AddFederatedServerSigningKey) GetIdentityChainID() []byte {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddFederatedServerSigningKey) GetKeyPriority() uint32 {
	if m != nil {
		return m.KeyPriority
	}
	return 0
}

func (m *AddFederatedServerSigningKey) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *AddFederatedServerSigningKey) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type AddReplaceMatryoshkaHash struct {
	IdentityChainID      []byte                `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	MatryoshkaHash       []byte                `protobuf:"bytes,2,opt,name=matryoshkaHash,proto3" json:"matryoshkaHash,omitempty"`
	FactoidOutputs       []*TransactionAddress `protobuf:"bytes,3,rep,name=factoidOutputs,proto3" json:"factoidOutputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AddReplaceMatryoshkaHash) Reset()         { *m = AddReplaceMatryoshkaHash{} }
func (m *AddReplaceMatryoshkaHash) String() string { return proto.CompactTextString(m) }
func (*AddReplaceMatryoshkaHash) ProtoMessage()    {}
func (*AddReplaceMatryoshkaHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{9}
}
func (m *AddReplaceMatryoshkaHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddReplaceMatryoshkaHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddReplaceMatryoshkaHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddReplaceMatryoshkaHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReplaceMatryoshkaHash.Merge(m, src)
}
func (m *AddReplaceMatryoshkaHash) XXX_Size() int {
	return m.Size()
}
func (m *AddReplaceMatryoshkaHash) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReplaceMatryoshkaHash.DiscardUnknown(m)
}

var xxx_messageInfo_AddReplaceMatryoshkaHash proto.InternalMessageInfo

func (m *AddReplaceMatryoshkaHash) GetIdentityChainID() []byte {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *AddReplaceMatryoshkaHash) GetMatryoshkaHash() []byte {
	if m != nil {
		return m.MatryoshkaHash
	}
	return nil
}

func (m *AddReplaceMatryoshkaHash) GetFactoidOutputs() []*TransactionAddress {
	if m != nil {
		return m.FactoidOutputs
	}
	return nil
}

type CancelCoinbaseDescriptor struct {
	DescriptorHeight     uint32   `protobuf:"varint,1,opt,name=descriptorHeight,proto3" json:"descriptorHeight,omitempty"`
	DescriptorIndex      uint32   `protobuf:"varint,2,opt,name=descriptorIndex,proto3" json:"descriptorIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelCoinbaseDescriptor) Reset()         { *m = CancelCoinbaseDescriptor{} }
func (m *CancelCoinbaseDescriptor) String() string { return proto.CompactTextString(m) }
func (*CancelCoinbaseDescriptor) ProtoMessage()    {}
func (*CancelCoinbaseDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{10}
}
func (m *CancelCoinbaseDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelCoinbaseDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelCoinbaseDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelCoinbaseDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelCoinbaseDescriptor.Merge(m, src)
}
func (m *CancelCoinbaseDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *CancelCoinbaseDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelCoinbaseDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_CancelCoinbaseDescriptor proto.InternalMessageInfo

func (m *CancelCoinbaseDescriptor) GetDescriptorHeight() uint32 {
	if m != nil {
		return m.DescriptorHeight
	}
	return 0
}

func (m *CancelCoinbaseDescriptor) GetDescriptorIndex() uint32 {
	if m != nil {
		return m.DescriptorIndex
	}
	return 0
}

type CoinbaseDescriptor struct {
	FactoidOutputs       []*TransactionAddress `protobuf:"bytes,1,rep,name=factoidOutputs,proto3" json:"factoidOutputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CoinbaseDescriptor) Reset()         { *m = CoinbaseDescriptor{} }
func (m *CoinbaseDescriptor) String() string { return proto.CompactTextString(m) }
func (*CoinbaseDescriptor) ProtoMessage()    {}
func (*CoinbaseDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{11}
}
func (m *CoinbaseDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinbaseDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinbaseDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinbaseDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinbaseDescriptor.Merge(m, src)
}
func (m *CoinbaseDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *CoinbaseDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinbaseDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_CoinbaseDescriptor proto.InternalMessageInfo

func (m *CoinbaseDescriptor) GetFactoidOutputs() []*TransactionAddress {
	if m != nil {
		return m.FactoidOutputs
	}
	return nil
}

type DirectoryBlockSignatureEntry struct {
	IdentityAdminChainID            []byte     `protobuf:"bytes,1,opt,name=identityAdminChainID,proto3" json:"identityAdminChainID,omitempty"`
	PreviousDirectoryBlockSignature *Signature `protobuf:"bytes,2,opt,name=previousDirectoryBlockSignature,proto3" json:"previousDirectoryBlockSignature,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}   `json:"-"`
	XXX_unrecognized                []byte     `json:"-"`
	XXX_sizecache                   int32      `json:"-"`
}

func (m *DirectoryBlockSignatureEntry) Reset()         { *m = DirectoryBlockSignatureEntry{} }
func (m *DirectoryBlockSignatureEntry) String() string { return proto.CompactTextString(m) }
func (*DirectoryBlockSignatureEntry) ProtoMessage()    {}
func (*DirectoryBlockSignatureEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{12}
}
func (m *DirectoryBlockSignatureEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DirectoryBlockSignatureEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DirectoryBlockSignatureEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DirectoryBlockSignatureEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectoryBlockSignatureEntry.Merge(m, src)
}
func (m *DirectoryBlockSignatureEntry) XXX_Size() int {
	return m.Size()
}
func (m *DirectoryBlockSignatureEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectoryBlockSignatureEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DirectoryBlockSignatureEntry proto.InternalMessageInfo

func (m *DirectoryBlockSignatureEntry) GetIdentityAdminChainID() []byte {
	if m != nil {
		return m.IdentityAdminChainID
	}
	return nil
}

func (m *DirectoryBlockSignatureEntry) GetPreviousDirectoryBlockSignature() *Signature {
	if m != nil {
		return m.PreviousDirectoryBlockSignature
	}
	return nil
}

type EndOfMinuteEntry struct {
	MinuteNumber         uint32   `protobuf:"varint,1,opt,name=minuteNumber,proto3" json:"minuteNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndOfMinuteEntry) Reset()         { *m = EndOfMinuteEntry{} }
func (m *EndOfMinuteEntry) String() string { return proto.CompactTextString(m) }
func (*EndOfMinuteEntry) ProtoMessage()    {}
func (*EndOfMinuteEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{13}
}
func (m *EndOfMinuteEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndOfMinuteEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndOfMinuteEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndOfMinuteEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndOfMinuteEntry.Merge(m, src)
}
func (m *EndOfMinuteEntry) XXX_Size() int {
	return m.Size()
}
func (m *EndOfMinuteEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EndOfMinuteEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EndOfMinuteEntry proto.InternalMessageInfo

func (m *EndOfMinuteEntry) GetMinuteNumber() uint32 {
	if m != nil {
		return m.MinuteNumber
	}
	return 0
}

type ForwardCompatibleEntry struct {
	Size_                uint32   `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForwardCompatibleEntry) Reset()         { *m = ForwardCompatibleEntry{} }
func (m *ForwardCompatibleEntry) String() string { return proto.CompactTextString(m) }
func (*ForwardCompatibleEntry) ProtoMessage()    {}
func (*ForwardCompatibleEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{14}
}
func (m *ForwardCompatibleEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForwardCompatibleEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForwardCompatibleEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForwardCompatibleEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardCompatibleEntry.Merge(m, src)
}
func (m *ForwardCompatibleEntry) XXX_Size() int {
	return m.Size()
}
func (m *ForwardCompatibleEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardCompatibleEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardCompatibleEntry proto.InternalMessageInfo

func (m *ForwardCompatibleEntry) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ForwardCompatibleEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type IncreaseServerCount struct {
	Amount               uint32   `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncreaseServerCount) Reset()         { *m = IncreaseServerCount{} }
func (m *IncreaseServerCount) String() string { return proto.CompactTextString(m) }
func (*IncreaseServerCount) ProtoMessage()    {}
func (*IncreaseServerCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{15}
}
func (m *IncreaseServerCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncreaseServerCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncreaseServerCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncreaseServerCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncreaseServerCount.Merge(m, src)
}
func (m *IncreaseServerCount) XXX_Size() int {
	return m.Size()
}
func (m *IncreaseServerCount) XXX_DiscardUnknown() {
	xxx_messageInfo_IncreaseServerCount.DiscardUnknown(m)
}

var xxx_messageInfo_IncreaseServerCount proto.InternalMessageInfo

func (m *IncreaseServerCount) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type RemoveFederatedServer struct {
	IdentityChainID      []byte   `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	BlockHeight          uint32   `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveFederatedServer) Reset()         { *m = RemoveFederatedServer{} }
func (m *RemoveFederatedServer) String() string { return proto.CompactTextString(m) }
func (*RemoveFederatedServer) ProtoMessage()    {}
func (*RemoveFederatedServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{16}
}
func (m *RemoveFederatedServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveFederatedServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveFederatedServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveFederatedServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFederatedServer.Merge(m, src)
}
func (m *RemoveFederatedServer) XXX_Size() int {
	return m.Size()
}
func (m *RemoveFederatedServer) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFederatedServer.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFederatedServer proto.InternalMessageInfo

func (m *RemoveFederatedServer) GetIdentityChainID() []byte {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *RemoveFederatedServer) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type RevealMatryoshkaHash struct {
	IdentityChainID      []byte   `protobuf:"bytes,1,opt,name=identityChainID,proto3" json:"identityChainID,omitempty"`
	MatryoshkaHash       []byte   `protobuf:"bytes,2,opt,name=matryoshkaHash,proto3" json:"matryoshkaHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevealMatryoshkaHash) Reset()         { *m = RevealMatryoshkaHash{} }
func (m *RevealMatryoshkaHash) String() string { return proto.CompactTextString(m) }
func (*RevealMatryoshkaHash) ProtoMessage()    {}
func (*RevealMatryoshkaHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{17}
}
func (m *RevealMatryoshkaHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevealMatryoshkaHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevealMatryoshkaHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevealMatryoshkaHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevealMatryoshkaHash.Merge(m, src)
}
func (m *RevealMatryoshkaHash) XXX_Size() int {
	return m.Size()
}
func (m *RevealMatryoshkaHash) XXX_DiscardUnknown() {
	xxx_messageInfo_RevealMatryoshkaHash.DiscardUnknown(m)
}

var xxx_messageInfo_RevealMatryoshkaHash proto.InternalMessageInfo

func (m *RevealMatryoshkaHash) GetIdentityChainID() []byte {
	if m != nil {
		return m.IdentityChainID
	}
	return nil
}

func (m *RevealMatryoshkaHash) GetMatryoshkaHash() []byte {
	if m != nil {
		return m.MatryoshkaHash
	}
	return nil
}

type ServerFault struct {
	Timestamp            *types.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ServerID             []byte           `protobuf:"bytes,2,opt,name=serverID,proto3" json:"serverID,omitempty"`
	AuditServerID        []byte           `protobuf:"bytes,3,opt,name=auditServerID,proto3" json:"auditServerID,omitempty"`
	VmIndex              uint32           `protobuf:"varint,4,opt,name=vmIndex,proto3" json:"vmIndex,omitempty"`
	BlockHeight          uint32           `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	MessageEntryHeight   uint32           `protobuf:"varint,6,opt,name=messageEntryHeight,proto3" json:"messageEntryHeight,omitempty"`
	SignatureList        []*Signature     `protobuf:"bytes,7,rep,name=signatureList,proto3" json:"signatureList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ServerFault) Reset()         { *m = ServerFault{} }
func (m *ServerFault) String() string { return proto.CompactTextString(m) }
func (*ServerFault) ProtoMessage()    {}
func (*ServerFault) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{18}
}
func (m *ServerFault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerFault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerFault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerFault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerFault.Merge(m, src)
}
func (m *ServerFault) XXX_Size() int {
	return m.Size()
}
func (m *ServerFault) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerFault.DiscardUnknown(m)
}

var xxx_messageInfo_ServerFault proto.InternalMessageInfo

func (m *ServerFault) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ServerFault) GetServerID() []byte {
	if m != nil {
		return m.ServerID
	}
	return nil
}

func (m *ServerFault) GetAuditServerID() []byte {
	if m != nil {
		return m.AuditServerID
	}
	return nil
}

func (m *ServerFault) GetVmIndex() uint32 {
	if m != nil {
		return m.VmIndex
	}
	return 0
}

func (m *ServerFault) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ServerFault) GetMessageEntryHeight() uint32 {
	if m != nil {
		return m.MessageEntryHeight
	}
	return 0
}

func (m *ServerFault) GetSignatureList() []*Signature {
	if m != nil {
		return m.SignatureList
	}
	return nil
}

type Signature struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_974412be9cb81647, []int{19}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*AdminBlock)(nil), "eventmessages.AdminBlock")
	proto.RegisterType((*AdminBlockHeader)(nil), "eventmessages.AdminBlockHeader")
	proto.RegisterType((*AdminBlockEntry)(nil), "eventmessages.AdminBlockEntry")
	proto.RegisterType((*AddAuditServer)(nil), "eventmessages.AddAuditServer")
	proto.RegisterType((*AddEfficiency)(nil), "eventmessages.AddEfficiency")
	proto.RegisterType((*AddFactoidAddress)(nil), "eventmessages.AddFactoidAddress")
	proto.RegisterType((*AddFederatedServer)(nil), "eventmessages.AddFederatedServer")
	proto.RegisterType((*AddFederatedServerBitcoinAnchorKey)(nil), "eventmessages.AddFederatedServerBitcoinAnchorKey")
	proto.RegisterType((*AddFederatedServerSigningKey)(nil), "eventmessages.AddFederatedServerSigningKey")
	proto.RegisterType((*AddReplaceMatryoshkaHash)(nil), "eventmessages.AddReplaceMatryoshkaHash")
	proto.RegisterType((*CancelCoinbaseDescriptor)(nil), "eventmessages.CancelCoinbaseDescriptor")
	proto.RegisterType((*CoinbaseDescriptor)(nil), "eventmessages.CoinbaseDescriptor")
	proto.RegisterType((*DirectoryBlockSignatureEntry)(nil), "eventmessages.DirectoryBlockSignatureEntry")
	proto.RegisterType((*EndOfMinuteEntry)(nil), "eventmessages.EndOfMinuteEntry")
	proto.RegisterType((*ForwardCompatibleEntry)(nil), "eventmessages.ForwardCompatibleEntry")
	proto.RegisterType((*IncreaseServerCount)(nil), "eventmessages.IncreaseServerCount")
	proto.RegisterType((*RemoveFederatedServer)(nil), "eventmessages.RemoveFederatedServer")
	proto.RegisterType((*RevealMatryoshkaHash)(nil), "eventmessages.RevealMatryoshkaHash")
	proto.RegisterType((*ServerFault)(nil), "eventmessages.ServerFault")
	proto.RegisterType((*Signature)(nil), "eventmessages.Signature")
}

func init() { proto.RegisterFile("eventmessages/adminBlock.proto", fileDescriptor_974412be9cb81647) }

var fileDescriptor_974412be9cb81647 = []byte{
	// 1246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xb6, 0xbb, 0xdd, 0x76, 0x7b, 0xf2, 0xd3, 0x76, 0x76, 0xb7, 0xb2, 0xaa, 0x90, 0x06, 0xb3,
	0x2c, 0x15, 0x88, 0x14, 0x8a, 0x04, 0x7b, 0xb5, 0xa2, 0x6d, 0xda, 0x75, 0x04, 0x65, 0xab, 0x69,
	0x05, 0x5a, 0xb4, 0xd2, 0x32, 0xf1, 0x4c, 0x92, 0x51, 0x12, 0x3b, 0x8c, 0x27, 0x81, 0x70, 0xcb,
	0x1d, 0xe2, 0x01, 0x78, 0x01, 0x6e, 0xb8, 0x44, 0x02, 0x5e, 0x81, 0x4b, 0x1e, 0x01, 0x95, 0x17,
	0x41, 0x1e, 0xdb, 0x49, 0x6c, 0x4f, 0x5a, 0x8a, 0x7a, 0x95, 0xcc, 0x99, 0xef, 0x7c, 0x67, 0x66,
	0x7c, 0xe6, 0x7c, 0x67, 0xa0, 0xca, 0xc6, 0xcc, 0x93, 0x03, 0x16, 0x04, 0xa4, 0xc3, 0x82, 0x3d,
	0x42, 0x07, 0xdc, 0x3b, 0xec, 0xfb, 0x6e, 0xaf, 0x3e, 0x14, 0xbe, 0xf4, 0x51, 0x29, 0x35, 0xbf,
	0xbd, 0x93, 0x86, 0x07, 0x5d, 0x22, 0x18, 0xbd, 0x98, 0x0c, 0x59, 0x10, 0xe1, 0xb7, 0x77, 0x3a,
	0xbe, 0xdf, 0xe9, 0xb3, 0x3d, 0x35, 0x6a, 0x8d, 0xda, 0x7b, 0x92, 0x0f, 0x58, 0x20, 0xc9, 0x60,
	0x18, 0x01, 0xec, 0x9f, 0x4d, 0x80, 0x83, 0x69, 0x14, 0xf4, 0x11, 0xac, 0x74, 0x19, 0xa1, 0x4c,
	0x58, 0x66, 0xcd, 0xdc, 0x2d, 0xec, 0xef, 0xd4, 0x53, 0x11, 0xea, 0x33, 0xa8, 0xa3, 0x60, 0x38,
	0x86, 0xa3, 0x27, 0xb0, 0xca, 0x3c, 0x29, 0x38, 0x0b, 0xac, 0xa5, 0xda, 0x9d, 0xdd, 0xc2, 0x7e,
	0x75, 0xa1, 0xe7, 0xb1, 0x27, 0xc5, 0x04, 0x27, 0x70, 0xf4, 0x08, 0x4a, 0x3d, 0x36, 0x39, 0x65,
	0xa2, 0xd7, 0x67, 0xd8, 0xf7, 0xa5, 0x75, 0xa7, 0x66, 0xee, 0x16, 0x71, 0xda, 0x68, 0xff, 0x60,
	0xc2, 0x46, 0x36, 0x38, 0x7a, 0x0f, 0xee, 0x0f, 0x05, 0x1b, 0x73, 0x7f, 0x14, 0x1c, 0x12, 0xb7,
	0x87, 0x59, 0xdb, 0x21, 0x41, 0x57, 0x2d, 0xbd, 0x88, 0x75, 0x53, 0xa8, 0x06, 0x85, 0x56, 0x44,
	0xc0, 0x3b, 0x5d, 0x69, 0x2d, 0xd5, 0xcc, 0xdd, 0x12, 0x9e, 0x37, 0x21, 0x1b, 0x8a, 0xf1, 0x9a,
	0x8f, 0xfc, 0x91, 0x17, 0xad, 0xa6, 0x84, 0x53, 0x36, 0xfb, 0xc7, 0x22, 0xac, 0x67, 0xf6, 0x83,
	0x9e, 0x41, 0x99, 0x50, 0x7a, 0x30, 0xa2, 0x5c, 0x9e, 0x33, 0x31, 0x9e, 0x9e, 0xe0, 0x6b, 0xb9,
	0x73, 0x98, 0x07, 0x39, 0x06, 0xce, 0xb8, 0xa1, 0x06, 0x94, 0x08, 0xa5, 0xc7, 0xed, 0x36, 0x77,
	0x39, 0xf3, 0xdc, 0x89, 0x5a, 0x64, 0x61, 0xbf, 0x92, 0xe7, 0x99, 0x61, 0x1c, 0x03, 0xa7, 0x9d,
	0xd0, 0x19, 0x6c, 0x12, 0x4a, 0x4f, 0x88, 0x2b, 0x7d, 0x4e, 0x0f, 0x28, 0x15, 0x2c, 0x08, 0xd4,
	0x5e, 0x0a, 0xfb, 0xb5, 0x3c, 0x53, 0x1a, 0xe7, 0x18, 0x38, 0xef, 0x8c, 0xce, 0x01, 0x85, 0x46,
	0x46, 0x99, 0x20, 0x92, 0xd1, 0x78, 0x93, 0xcb, 0x8a, 0xf2, 0x75, 0x0d, 0x65, 0x1a, 0xe8, 0x18,
	0x58, 0xe3, 0x8e, 0xbe, 0x37, 0xc1, 0xce, 0x9b, 0x0f, 0xb9, 0x74, 0x7d, 0xee, 0x1d, 0x78, 0x6e,
	0xd7, 0x17, 0x9f, 0xb0, 0x89, 0x75, 0x57, 0x45, 0x79, 0xff, 0xda, 0x28, 0x59, 0x47, 0xc7, 0xc0,
	0xff, 0x81, 0x1e, 0x7d, 0x0d, 0x95, 0x3c, 0xea, 0x9c, 0x77, 0x3c, 0xee, 0x75, 0xc2, 0xf0, 0x2b,
	0x2a, 0xfc, 0x3b, 0xd7, 0x86, 0x9f, 0xb9, 0x38, 0x06, 0xbe, 0x92, 0x12, 0x31, 0xb0, 0x08, 0xa5,
	0x98, 0x0d, 0xfb, 0xc4, 0x65, 0xa7, 0x44, 0x8a, 0x89, 0x1f, 0x74, 0x7b, 0x44, 0xe5, 0xef, 0xaa,
	0x0a, 0xf7, 0x56, 0x3e, 0x9c, 0x16, 0xee, 0x18, 0x78, 0x21, 0x55, 0x18, 0xc6, 0x25, 0x9e, 0xcb,
	0xfa, 0x47, 0x3e, 0xf7, 0x5a, 0x24, 0x60, 0x0d, 0x16, 0xb8, 0x82, 0x0f, 0xa5, 0x2f, 0xac, 0x7b,
	0xda, 0x30, 0x47, 0x0b, 0xe0, 0x61, 0x98, 0x45, 0x54, 0x61, 0x6e, 0xb8, 0xf9, 0x00, 0x6b, 0xda,
	0xdc, 0xd0, 0x52, 0x6b, 0xdc, 0xc3, 0xaf, 0x42, 0xb9, 0x60, 0xae, 0xf4, 0xc5, 0x44, 0x5d, 0xb4,
	0xf0, 0xf8, 0x88, 0x1c, 0x09, 0xa6, 0x6e, 0x9c, 0x05, 0xda, 0xaf, 0xd2, 0xb8, 0xc2, 0x25, 0xfc,
	0x2a, 0x57, 0x51, 0xa2, 0x53, 0xd8, 0x60, 0x1e, 0x7d, 0xde, 0x3e, 0xe5, 0xde, 0x48, 0xc6, 0x61,
	0x0a, 0xda, 0x42, 0x78, 0x9c, 0x81, 0x39, 0x06, 0xce, 0xb9, 0xa2, 0x57, 0xb0, 0xd5, 0xf6, 0xc5,
	0x37, 0x44, 0xd0, 0x23, 0x7f, 0x30, 0x24, 0x92, 0xb7, 0xfa, 0x31, 0x69, 0x51, 0x91, 0xbe, 0x99,
	0x21, 0x3d, 0xd1, 0x82, 0x1d, 0x03, 0x2f, 0xa0, 0x41, 0x9f, 0xc3, 0x7d, 0xee, 0xb9, 0x82, 0x91,
	0x80, 0x45, 0x19, 0x16, 0xd5, 0xac, 0x92, 0x62, 0xb7, 0x33, 0xec, 0xcd, 0x3c, 0xd2, 0x31, 0xb0,
	0x8e, 0x00, 0xbd, 0x84, 0x87, 0x82, 0x0d, 0xfc, 0x31, 0xcb, 0x5e, 0xf7, 0xb2, 0x62, 0x7e, 0x94,
	0x61, 0xc6, 0x3a, 0xac, 0x63, 0x60, 0x3d, 0x09, 0x7a, 0x01, 0x0f, 0x04, 0x1b, 0x33, 0xd2, 0xcf,
	0xe4, 0xfd, 0xba, 0x22, 0x7f, 0x23, 0x47, 0x9e, 0x87, 0x3a, 0x06, 0xd6, 0x52, 0xa0, 0xa7, 0x50,
	0x08, 0x54, 0x90, 0x13, 0x32, 0xea, 0x4b, 0x6b, 0x43, 0x31, 0x6e, 0x67, 0x18, 0xcf, 0x67, 0x08,
	0xc7, 0xc0, 0xf3, 0x0e, 0xa1, 0x3e, 0x28, 0xcd, 0x6d, 0x2a, 0x15, 0xb5, 0x36, 0x23, 0x7d, 0x98,
	0x33, 0x1d, 0x6e, 0xc2, 0x3a, 0x49, 0x97, 0x7e, 0xfb, 0x25, 0x94, 0xd3, 0x55, 0x1d, 0xed, 0xc2,
	0x3a, 0xa7, 0xcc, 0x93, 0x5c, 0x4e, 0x8e, 0xba, 0x84, 0x7b, 0xcd, 0x46, 0x2c, 0x4a, 0x59, 0xf3,
	0xf5, 0x82, 0x64, 0xbf, 0x80, 0x52, 0xaa, 0xd6, 0xdf, 0x80, 0xbc, 0x0a, 0xc0, 0xd2, 0x3a, 0x52,
	0xc2, 0x73, 0x16, 0xfb, 0x0b, 0xd8, 0xcc, 0x15, 0xff, 0x1b, 0xd0, 0x5b, 0xb0, 0x4a, 0x62, 0x65,
	0x59, 0x52, 0x88, 0x64, 0x68, 0x7f, 0x05, 0x28, 0x5f, 0x1d, 0x6f, 0xf5, 0x54, 0x7e, 0x35, 0xc1,
	0xbe, 0xbe, 0xfe, 0xdf, 0x2c, 0x64, 0x8f, 0x4d, 0xce, 0x04, 0xf7, 0x05, 0x97, 0xc9, 0x61, 0xcd,
	0x9b, 0xc2, 0xed, 0xf6, 0xd8, 0x44, 0xe5, 0x45, 0xd4, 0x14, 0x24, 0x43, 0xf4, 0x18, 0xca, 0xcc,
	0xa5, 0x01, 0x39, 0x1b, 0xb5, 0xfa, 0xdc, 0x0d, 0x15, 0x63, 0x59, 0x05, 0xc9, 0x58, 0xed, 0x5f,
	0x4c, 0xa8, 0x5c, 0xa5, 0x1a, 0xb7, 0xba, 0xdc, 0x0a, 0xac, 0x0d, 0xa7, 0xeb, 0x89, 0x7a, 0xaa,
	0x99, 0x21, 0x7b, 0xc2, 0xcb, 0xf9, 0x13, 0xfe, 0xc3, 0x04, 0x6b, 0x91, 0xe6, 0xdc, 0x60, 0xa1,
	0x8f, 0xa1, 0x3c, 0x48, 0x5f, 0xf3, 0x28, 0x57, 0x32, 0x56, 0xd4, 0x84, 0x72, 0x3b, 0x4a, 0xc4,
	0xe7, 0x23, 0x39, 0x1c, 0xc9, 0xb0, 0x5b, 0xb9, 0xa3, 0x91, 0x8f, 0x0b, 0x41, 0xbc, 0x80, 0xb8,
	0x92, 0xfb, 0x5e, 0x9c, 0xb1, 0x38, 0xe3, 0x68, 0x0f, 0xc1, 0x5a, 0xa4, 0x62, 0xe8, 0x6d, 0xd8,
	0xa0, 0x33, 0xe1, 0x89, 0x36, 0x6f, 0xaa, 0xcd, 0xe7, 0xec, 0xe1, 0x26, 0x67, 0xb6, 0xa6, 0x47,
	0xd9, 0xb7, 0xf1, 0x39, 0x67, 0xcd, 0xf6, 0x2b, 0x40, 0x9a, 0x58, 0xf9, 0x2d, 0x99, 0xff, 0x77,
	0x4b, 0xbf, 0x9b, 0x50, 0xb9, 0x4a, 0xd9, 0xd0, 0x3e, 0x3c, 0x48, 0x4e, 0x5e, 0x75, 0xa6, 0xe9,
	0xaf, 0xa2, 0x9d, 0x43, 0x2d, 0xd8, 0x49, 0x7a, 0xe4, 0x05, 0xdc, 0x71, 0xef, 0x69, 0x65, 0x0b,
	0x68, 0x32, 0x8f, 0xaf, 0x23, 0xb0, 0x3f, 0x84, 0x8d, 0xac, 0x54, 0xaa, 0x16, 0x5b, 0x0d, 0x3f,
	0x1b, 0x0d, 0x5a, 0x71, 0xa3, 0x1c, 0xb6, 0xd8, 0x73, 0x36, 0xfb, 0x63, 0xd8, 0xd2, 0xab, 0x21,
	0x42, 0xb0, 0x1c, 0xf0, 0xef, 0x58, 0xec, 0xa5, 0xfe, 0x87, 0x36, 0x4a, 0x24, 0x89, 0x53, 0x4b,
	0xfd, 0xb7, 0xdf, 0x85, 0xfb, 0x1a, 0xc5, 0x43, 0x5b, 0xb0, 0x42, 0x06, 0x4a, 0x25, 0x23, 0x82,
	0x78, 0x64, 0xbb, 0xf0, 0x50, 0x2b, 0x63, 0xb7, 0x5a, 0xb5, 0xba, 0xf0, 0x40, 0x27, 0x67, 0xb7,
	0x7f, 0x9d, 0xec, 0xdf, 0x96, 0xa0, 0x30, 0xa7, 0x73, 0xe8, 0x09, 0xac, 0x4d, 0x9f, 0x7e, 0xf1,
	0xcb, 0x64, 0xbb, 0x1e, 0x3d, 0x0e, 0xeb, 0xc9, 0xe3, 0xb0, 0x7e, 0x91, 0x20, 0xf0, 0x0c, 0x8c,
	0xb6, 0xe1, 0x5e, 0xa4, 0x90, 0xcd, 0x46, 0x1c, 0x6b, 0x3a, 0x0e, 0xdf, 0x6e, 0x64, 0x26, 0x7b,
	0xcd, 0x46, 0xf2, 0x76, 0x4b, 0x19, 0xc3, 0xc2, 0x39, 0x1e, 0x44, 0xf7, 0x27, 0xaa, 0x33, 0xc9,
	0x30, 0x7b, 0x62, 0x77, 0xf3, 0xcf, 0xb1, 0x3a, 0xa0, 0x38, 0xed, 0xa2, 0x5e, 0x28, 0x02, 0xae,
	0x28, 0xa0, 0x66, 0x06, 0x3d, 0x85, 0x52, 0x90, 0x24, 0xdf, 0xa7, 0x3c, 0x90, 0xd6, 0xaa, 0xba,
	0x72, 0x8b, 0x33, 0x38, 0x0d, 0xb7, 0x9f, 0xc1, 0xda, 0x74, 0x2e, 0x5d, 0x42, 0xcd, 0x6c, 0x09,
	0xad, 0xc0, 0x5a, 0x90, 0xba, 0x28, 0x45, 0x3c, 0x33, 0x1c, 0x1e, 0xfc, 0x79, 0x59, 0x35, 0xff,
	0xba, 0xac, 0x9a, 0x7f, 0x5f, 0x56, 0xcd, 0x9f, 0xfe, 0xa9, 0x1a, 0x50, 0x73, 0xfd, 0x41, 0x5d,
	0xdd, 0xeb, 0xe4, 0x87, 0xa6, 0x57, 0xf5, 0x65, 0xfa, 0x75, 0xdf, 0x5a, 0x51, 0x1f, 0xe6, 0x83,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x87, 0x89, 0xad, 0x15, 0x15, 0x10, 0x00, 0x00,
}

func (m *AdminBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.KeyMerkleRoot) > 0 {
		i -= len(m.KeyMerkleRoot)
		copy(dAtA[i:], m.KeyMerkleRoot)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.KeyMerkleRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdminBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MessageCount != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.MessageCount))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PreviousBackRefHash) > 0 {
		i -= len(m.PreviousBackRefHash)
		copy(dAtA[i:], m.PreviousBackRefHash)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.PreviousBackRefHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminBlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminBlockEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AdminIdType != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.AdminIdType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.AdminBlockEntry != nil {
		{
			size := m.AdminBlockEntry.Size()
			i -= size
			if _, err := m.AdminBlockEntry.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdminBlockEntry_AddAuditServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_AddAuditServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddAuditServer != nil {
		{
			size, err := m.AddAuditServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddEfficiency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_AddEfficiency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddEfficiency != nil {
		{
			size, err := m.AddEfficiency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddFactoidAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_AddFactoidAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddFactoidAddress != nil {
		{
			size, err := m.AddFactoidAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddFederatedServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_AddFederatedServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddFederatedServer != nil {
		{
			size, err := m.AddFederatedServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddFederatedServerBitcoinAnchorKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_AddFederatedServerBitcoinAnchorKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddFederatedServerBitcoinAnchorKey != nil {
		{
			size, err := m.AddFederatedServerBitcoinAnchorKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddFederatedServerSigningKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_AddFederatedServerSigningKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddFederatedServerSigningKey != nil {
		{
			size, err := m.AddFederatedServerSigningKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_AddReplaceMatryoshkaHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_AddReplaceMatryoshkaHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddReplaceMatryoshkaHash != nil {
		{
			size, err := m.AddReplaceMatryoshkaHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_CancelCoinbaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_CancelCoinbaseDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelCoinbaseDescriptor != nil {
		{
			size, err := m.CancelCoinbaseDescriptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_CoinbaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_CoinbaseDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CoinbaseDescriptor != nil {
		{
			size, err := m.CoinbaseDescriptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_DirectoryBlockSignatureEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_DirectoryBlockSignatureEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DirectoryBlockSignatureEntry != nil {
		{
			size, err := m.DirectoryBlockSignatureEntry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_EndOfMinuteEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_EndOfMinuteEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EndOfMinuteEntry != nil {
		{
			size, err := m.EndOfMinuteEntry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_ForwardCompatibleEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_ForwardCompatibleEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForwardCompatibleEntry != nil {
		{
			size, err := m.ForwardCompatibleEntry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_IncreaseServerCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_IncreaseServerCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.IncreaseServerCount != nil {
		{
			size, err := m.IncreaseServerCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_RemoveFederatedServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_RemoveFederatedServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemoveFederatedServer != nil {
		{
			size, err := m.RemoveFederatedServer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_RevealMatryoshkaHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_RevealMatryoshkaHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RevealMatryoshkaHash != nil {
		{
			size, err := m.RevealMatryoshkaHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *AdminBlockEntry_ServerFault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminBlockEntry_ServerFault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServerFault != nil {
		{
			size, err := m.ServerFault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *AddAuditServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAuditServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddAuditServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IdentityChainID) > 0 {
		i -= len(m.IdentityChainID)
		copy(dAtA[i:], m.IdentityChainID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.IdentityChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddEfficiency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddEfficiency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddEfficiency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Efficiency != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.Efficiency))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IdentityChainID) > 0 {
		i -= len(m.IdentityChainID)
		copy(dAtA[i:], m.IdentityChainID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.IdentityChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFactoidAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFactoidAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFactoidAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IdentityChainID) > 0 {
		i -= len(m.IdentityChainID)
		copy(dAtA[i:], m.IdentityChainID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.IdentityChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFederatedServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFederatedServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFederatedServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IdentityChainID) > 0 {
		i -= len(m.IdentityChainID)
		copy(dAtA[i:], m.IdentityChainID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.IdentityChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFederatedServerBitcoinAnchorKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFederatedServerBitcoinAnchorKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFederatedServerBitcoinAnchorKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EcdsaPublicKey) > 0 {
		i -= len(m.EcdsaPublicKey)
		copy(dAtA[i:], m.EcdsaPublicKey)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.EcdsaPublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.KeyType != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x18
	}
	if m.KeyPriority != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.KeyPriority))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IdentityChainID) > 0 {
		i -= len(m.IdentityChainID)
		copy(dAtA[i:], m.IdentityChainID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.IdentityChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFederatedServerSigningKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFederatedServerSigningKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFederatedServerSigningKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.KeyPriority != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.KeyPriority))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IdentityChainID) > 0 {
		i -= len(m.IdentityChainID)
		copy(dAtA[i:], m.IdentityChainID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.IdentityChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddReplaceMatryoshkaHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddReplaceMatryoshkaHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddReplaceMatryoshkaHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FactoidOutputs) > 0 {
		for iNdEx := len(m.FactoidOutputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FactoidOutputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdminBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MatryoshkaHash) > 0 {
		i -= len(m.MatryoshkaHash)
		copy(dAtA[i:], m.MatryoshkaHash)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.MatryoshkaHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IdentityChainID) > 0 {
		i -= len(m.IdentityChainID)
		copy(dAtA[i:], m.IdentityChainID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.IdentityChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelCoinbaseDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelCoinbaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelCoinbaseDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DescriptorIndex != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.DescriptorIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.DescriptorHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.DescriptorHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CoinbaseDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinbaseDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinbaseDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FactoidOutputs) > 0 {
		for iNdEx := len(m.FactoidOutputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FactoidOutputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdminBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DirectoryBlockSignatureEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DirectoryBlockSignatureEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DirectoryBlockSignatureEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PreviousDirectoryBlockSignature != nil {
		{
			size, err := m.PreviousDirectoryBlockSignature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IdentityAdminChainID) > 0 {
		i -= len(m.IdentityAdminChainID)
		copy(dAtA[i:], m.IdentityAdminChainID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.IdentityAdminChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndOfMinuteEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndOfMinuteEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndOfMinuteEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinuteNumber != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.MinuteNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ForwardCompatibleEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardCompatibleEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForwardCompatibleEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Size_ != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncreaseServerCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncreaseServerCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncreaseServerCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveFederatedServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveFederatedServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveFederatedServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IdentityChainID) > 0 {
		i -= len(m.IdentityChainID)
		copy(dAtA[i:], m.IdentityChainID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.IdentityChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevealMatryoshkaHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevealMatryoshkaHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevealMatryoshkaHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MatryoshkaHash) > 0 {
		i -= len(m.MatryoshkaHash)
		copy(dAtA[i:], m.MatryoshkaHash)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.MatryoshkaHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IdentityChainID) > 0 {
		i -= len(m.IdentityChainID)
		copy(dAtA[i:], m.IdentityChainID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.IdentityChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerFault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerFault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerFault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SignatureList) > 0 {
		for iNdEx := len(m.SignatureList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignatureList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAdminBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MessageEntryHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.MessageEntryHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockHeight != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.VmIndex != 0 {
		i = encodeVarintAdminBlock(dAtA, i, uint64(m.VmIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AuditServerID) > 0 {
		i -= len(m.AuditServerID)
		copy(dAtA[i:], m.AuditServerID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.AuditServerID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServerID) > 0 {
		i -= len(m.ServerID)
		copy(dAtA[i:], m.ServerID)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.ServerID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdminBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintAdminBlock(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdminBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdminBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AdminBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovAdminBlock(uint64(l))
		}
	}
	l = len(m.KeyMerkleRoot)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PreviousBackRefHash)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.MessageCount != 0 {
		n += 1 + sovAdminBlock(uint64(m.MessageCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdminBlockEntry != nil {
		n += m.AdminBlockEntry.Size()
	}
	if m.AdminIdType != 0 {
		n += 2 + sovAdminBlock(uint64(m.AdminIdType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminBlockEntry_AddAuditServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddAuditServer != nil {
		l = m.AddAuditServer.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddEfficiency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddEfficiency != nil {
		l = m.AddEfficiency.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddFactoidAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddFactoidAddress != nil {
		l = m.AddFactoidAddress.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddFederatedServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddFederatedServer != nil {
		l = m.AddFederatedServer.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddFederatedServerBitcoinAnchorKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddFederatedServerBitcoinAnchorKey != nil {
		l = m.AddFederatedServerBitcoinAnchorKey.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddFederatedServerSigningKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddFederatedServerSigningKey != nil {
		l = m.AddFederatedServerSigningKey.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_AddReplaceMatryoshkaHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddReplaceMatryoshkaHash != nil {
		l = m.AddReplaceMatryoshkaHash.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_CancelCoinbaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelCoinbaseDescriptor != nil {
		l = m.CancelCoinbaseDescriptor.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_CoinbaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CoinbaseDescriptor != nil {
		l = m.CoinbaseDescriptor.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_DirectoryBlockSignatureEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DirectoryBlockSignatureEntry != nil {
		l = m.DirectoryBlockSignatureEntry.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_EndOfMinuteEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndOfMinuteEntry != nil {
		l = m.EndOfMinuteEntry.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_ForwardCompatibleEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardCompatibleEntry != nil {
		l = m.ForwardCompatibleEntry.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_IncreaseServerCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncreaseServerCount != nil {
		l = m.IncreaseServerCount.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_RemoveFederatedServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoveFederatedServer != nil {
		l = m.RemoveFederatedServer.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_RevealMatryoshkaHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RevealMatryoshkaHash != nil {
		l = m.RevealMatryoshkaHash.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AdminBlockEntry_ServerFault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerFault != nil {
		l = m.ServerFault.Size()
		n += 2 + l + sovAdminBlock(uint64(l))
	}
	return n
}
func (m *AddAuditServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityChainID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddEfficiency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityChainID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.Efficiency != 0 {
		n += 1 + sovAdminBlock(uint64(m.Efficiency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFactoidAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityChainID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFederatedServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityChainID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFederatedServerBitcoinAnchorKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityChainID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.KeyPriority != 0 {
		n += 1 + sovAdminBlock(uint64(m.KeyPriority))
	}
	if m.KeyType != 0 {
		n += 1 + sovAdminBlock(uint64(m.KeyType))
	}
	l = len(m.EcdsaPublicKey)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddFederatedServerSigningKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityChainID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.KeyPriority != 0 {
		n += 1 + sovAdminBlock(uint64(m.KeyPriority))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddReplaceMatryoshkaHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityChainID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	l = len(m.MatryoshkaHash)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if len(m.FactoidOutputs) > 0 {
		for _, e := range m.FactoidOutputs {
			l = e.Size()
			n += 1 + l + sovAdminBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelCoinbaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DescriptorHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.DescriptorHeight))
	}
	if m.DescriptorIndex != 0 {
		n += 1 + sovAdminBlock(uint64(m.DescriptorIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinbaseDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FactoidOutputs) > 0 {
		for _, e := range m.FactoidOutputs {
			l = e.Size()
			n += 1 + l + sovAdminBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DirectoryBlockSignatureEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityAdminChainID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.PreviousDirectoryBlockSignature != nil {
		l = m.PreviousDirectoryBlockSignature.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndOfMinuteEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinuteNumber != 0 {
		n += 1 + sovAdminBlock(uint64(m.MinuteNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ForwardCompatibleEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovAdminBlock(uint64(m.Size_))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncreaseServerCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovAdminBlock(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveFederatedServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityChainID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RevealMatryoshkaHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IdentityChainID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	l = len(m.MatryoshkaHash)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerFault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	l = len(m.AuditServerID)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.VmIndex != 0 {
		n += 1 + sovAdminBlock(uint64(m.VmIndex))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.BlockHeight))
	}
	if m.MessageEntryHeight != 0 {
		n += 1 + sovAdminBlock(uint64(m.MessageEntryHeight))
	}
	if len(m.SignatureList) > 0 {
		for _, e := range m.SignatureList {
			l = e.Size()
			n += 1 + l + sovAdminBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovAdminBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAdminBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdminBlock(x uint64) (n int) {
	return sovAdminBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &AdminBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &AdminBlockEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyMerkleRoot = append(m.KeyMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyMerkleRoot == nil {
				m.KeyMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBackRefHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousBackRefHash = append(m.PreviousBackRefHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousBackRefHash == nil {
				m.PreviousBackRefHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageCount", wireType)
			}
			m.MessageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminBlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminBlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminBlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddAuditServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddAuditServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_AddAuditServer{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddEfficiency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddEfficiency{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_AddEfficiency{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFactoidAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddFactoidAddress{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_AddFactoidAddress{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFederatedServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddFederatedServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_AddFederatedServer{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFederatedServerBitcoinAnchorKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddFederatedServerBitcoinAnchorKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_AddFederatedServerBitcoinAnchorKey{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFederatedServerSigningKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddFederatedServerSigningKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_AddFederatedServerSigningKey{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddReplaceMatryoshkaHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddReplaceMatryoshkaHash{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_AddReplaceMatryoshkaHash{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelCoinbaseDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CancelCoinbaseDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_CancelCoinbaseDescriptor{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinbaseDescriptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CoinbaseDescriptor{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_CoinbaseDescriptor{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirectoryBlockSignatureEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DirectoryBlockSignatureEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_DirectoryBlockSignatureEntry{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOfMinuteEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EndOfMinuteEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_EndOfMinuteEntry{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardCompatibleEntry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForwardCompatibleEntry{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_ForwardCompatibleEntry{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncreaseServerCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IncreaseServerCount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_IncreaseServerCount{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFederatedServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RemoveFederatedServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_RemoveFederatedServer{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealMatryoshkaHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RevealMatryoshkaHash{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_RevealMatryoshkaHash{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServerFault{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AdminBlockEntry = &AdminBlockEntry_ServerFault{v}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminIdType", wireType)
			}
			m.AdminIdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminIdType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAuditServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAuditServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAuditServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityChainID = append(m.IdentityChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityChainID == nil {
				m.IdentityChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddEfficiency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddEfficiency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddEfficiency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityChainID = append(m.IdentityChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityChainID == nil {
				m.IdentityChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Efficiency", wireType)
			}
			m.Efficiency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Efficiency |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFactoidAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFactoidAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFactoidAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityChainID = append(m.IdentityChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityChainID == nil {
				m.IdentityChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFederatedServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFederatedServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFederatedServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityChainID = append(m.IdentityChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityChainID == nil {
				m.IdentityChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFederatedServerBitcoinAnchorKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFederatedServerBitcoinAnchorKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFederatedServerBitcoinAnchorKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityChainID = append(m.IdentityChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityChainID == nil {
				m.IdentityChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPriority", wireType)
			}
			m.KeyPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyPriority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcdsaPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcdsaPublicKey = append(m.EcdsaPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EcdsaPublicKey == nil {
				m.EcdsaPublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFederatedServerSigningKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFederatedServerSigningKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFederatedServerSigningKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityChainID = append(m.IdentityChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityChainID == nil {
				m.IdentityChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPriority", wireType)
			}
			m.KeyPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyPriority |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddReplaceMatryoshkaHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddReplaceMatryoshkaHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddReplaceMatryoshkaHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityChainID = append(m.IdentityChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityChainID == nil {
				m.IdentityChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatryoshkaHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatryoshkaHash = append(m.MatryoshkaHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MatryoshkaHash == nil {
				m.MatryoshkaHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoidOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactoidOutputs = append(m.FactoidOutputs, &TransactionAddress{})
			if err := m.FactoidOutputs[len(m.FactoidOutputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelCoinbaseDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelCoinbaseDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelCoinbaseDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorHeight", wireType)
			}
			m.DescriptorHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorIndex", wireType)
			}
			m.DescriptorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinbaseDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinbaseDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinbaseDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoidOutputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactoidOutputs = append(m.FactoidOutputs, &TransactionAddress{})
			if err := m.FactoidOutputs[len(m.FactoidOutputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DirectoryBlockSignatureEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DirectoryBlockSignatureEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DirectoryBlockSignatureEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityAdminChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityAdminChainID = append(m.IdentityAdminChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityAdminChainID == nil {
				m.IdentityAdminChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousDirectoryBlockSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousDirectoryBlockSignature == nil {
				m.PreviousDirectoryBlockSignature = &Signature{}
			}
			if err := m.PreviousDirectoryBlockSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndOfMinuteEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndOfMinuteEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndOfMinuteEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteNumber", wireType)
			}
			m.MinuteNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinuteNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForwardCompatibleEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardCompatibleEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardCompatibleEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncreaseServerCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncreaseServerCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncreaseServerCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveFederatedServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveFederatedServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveFederatedServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityChainID = append(m.IdentityChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityChainID == nil {
				m.IdentityChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevealMatryoshkaHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevealMatryoshkaHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevealMatryoshkaHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityChainID = append(m.IdentityChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityChainID == nil {
				m.IdentityChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatryoshkaHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatryoshkaHash = append(m.MatryoshkaHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MatryoshkaHash == nil {
				m.MatryoshkaHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerFault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerFault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerFault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = append(m.ServerID[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerID == nil {
				m.ServerID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditServerID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditServerID = append(m.AuditServerID[:0], dAtA[iNdEx:postIndex]...)
			if m.AuditServerID == nil {
				m.AuditServerID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmIndex", wireType)
			}
			m.VmIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageEntryHeight", wireType)
			}
			m.MessageEntryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageEntryHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureList = append(m.SignatureList, &Signature{})
			if err := m.SignatureList[len(m.SignatureList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdminBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdminBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdminBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdminBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdminBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdminBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdminBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdminBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdminBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdminBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdminBlock = fmt.Errorf("proto: unexpected end of group")
)
