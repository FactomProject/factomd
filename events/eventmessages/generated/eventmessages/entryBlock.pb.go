// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventmessages/entryBlock.proto

package eventmessages

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EntryBlock struct {
	Header               *EntryBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	EntryHashes          [][]byte          `protobuf:"bytes,2,rep,name=entryHashes,proto3" json:"entryHashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EntryBlock) Reset()         { *m = EntryBlock{} }
func (m *EntryBlock) String() string { return proto.CompactTextString(m) }
func (*EntryBlock) ProtoMessage()    {}
func (*EntryBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83f69270bc17aac, []int{0}
}
func (m *EntryBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBlock.Merge(m, src)
}
func (m *EntryBlock) XXX_Size() int {
	return m.Size()
}
func (m *EntryBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBlock.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBlock proto.InternalMessageInfo

func (m *EntryBlock) GetHeader() *EntryBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EntryBlock) GetEntryHashes() [][]byte {
	if m != nil {
		return m.EntryHashes
	}
	return nil
}

type EntryBlockHeader struct {
	BodyMerkleRoot        []byte   `protobuf:"bytes,1,opt,name=bodyMerkleRoot,proto3" json:"bodyMerkleRoot,omitempty"`
	ChainID               []byte   `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	PreviousFullHash      []byte   `protobuf:"bytes,3,opt,name=previousFullHash,proto3" json:"previousFullHash,omitempty"`
	PreviousKeyMerkleRoot []byte   `protobuf:"bytes,4,opt,name=previousKeyMerkleRoot,proto3" json:"previousKeyMerkleRoot,omitempty"`
	BlockHeight           uint32   `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockSequence         uint32   `protobuf:"varint,6,opt,name=blockSequence,proto3" json:"blockSequence,omitempty"`
	EntryCount            uint32   `protobuf:"varint,7,opt,name=entryCount,proto3" json:"entryCount,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *EntryBlockHeader) Reset()         { *m = EntryBlockHeader{} }
func (m *EntryBlockHeader) String() string { return proto.CompactTextString(m) }
func (*EntryBlockHeader) ProtoMessage()    {}
func (*EntryBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83f69270bc17aac, []int{1}
}
func (m *EntryBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBlockHeader.Merge(m, src)
}
func (m *EntryBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *EntryBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBlockHeader proto.InternalMessageInfo

func (m *EntryBlockHeader) GetBodyMerkleRoot() []byte {
	if m != nil {
		return m.BodyMerkleRoot
	}
	return nil
}

func (m *EntryBlockHeader) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *EntryBlockHeader) GetPreviousFullHash() []byte {
	if m != nil {
		return m.PreviousFullHash
	}
	return nil
}

func (m *EntryBlockHeader) GetPreviousKeyMerkleRoot() []byte {
	if m != nil {
		return m.PreviousKeyMerkleRoot
	}
	return nil
}

func (m *EntryBlockHeader) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *EntryBlockHeader) GetBlockSequence() uint32 {
	if m != nil {
		return m.BlockSequence
	}
	return 0
}

func (m *EntryBlockHeader) GetEntryCount() uint32 {
	if m != nil {
		return m.EntryCount
	}
	return 0
}

type EntryBlockEntry struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ExternalIDs          [][]byte `protobuf:"bytes,2,rep,name=externalIDs,proto3" json:"externalIDs,omitempty"`
	Content              []byte   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Version              uint32   `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ChainID              []byte   `protobuf:"bytes,5,opt,name=chainID,proto3" json:"chainID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntryBlockEntry) Reset()         { *m = EntryBlockEntry{} }
func (m *EntryBlockEntry) String() string { return proto.CompactTextString(m) }
func (*EntryBlockEntry) ProtoMessage()    {}
func (*EntryBlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_d83f69270bc17aac, []int{2}
}
func (m *EntryBlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntryBlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntryBlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntryBlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntryBlockEntry.Merge(m, src)
}
func (m *EntryBlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *EntryBlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_EntryBlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_EntryBlockEntry proto.InternalMessageInfo

func (m *EntryBlockEntry) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *EntryBlockEntry) GetExternalIDs() [][]byte {
	if m != nil {
		return m.ExternalIDs
	}
	return nil
}

func (m *EntryBlockEntry) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *EntryBlockEntry) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *EntryBlockEntry) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func init() {
	proto.RegisterType((*EntryBlock)(nil), "eventmessages.EntryBlock")
	proto.RegisterType((*EntryBlockHeader)(nil), "eventmessages.EntryBlockHeader")
	proto.RegisterType((*EntryBlockEntry)(nil), "eventmessages.EntryBlockEntry")
}

func init() { proto.RegisterFile("eventmessages/entryBlock.proto", fileDescriptor_d83f69270bc17aac) }

var fileDescriptor_d83f69270bc17aac = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0x87, 0x6f, 0xfa, 0x17, 0x4e, 0x9b, 0x7b, 0xcb, 0xc0, 0x85, 0x59, 0xc5, 0x50, 0x44, 0x8a,
	0x8b, 0x08, 0x2a, 0xb8, 0xb6, 0x56, 0x69, 0x11, 0x37, 0x71, 0xe7, 0x2e, 0x4d, 0x8f, 0x4d, 0x68,
	0x3a, 0x53, 0x33, 0x93, 0x62, 0x1f, 0x44, 0x70, 0xe5, 0xf3, 0xb8, 0xf4, 0x11, 0xa4, 0xbe, 0x88,
	0xe4, 0xb4, 0x69, 0x92, 0xea, 0x2a, 0x73, 0x7e, 0xf3, 0x0d, 0x27, 0xe7, 0xe3, 0x80, 0x85, 0x4b,
	0x14, 0x7a, 0x8e, 0x4a, 0x79, 0x53, 0x54, 0x27, 0x28, 0x74, 0xbc, 0xea, 0x47, 0xd2, 0x9f, 0x39,
	0x8b, 0x58, 0x6a, 0xc9, 0xcc, 0xd2, 0x7d, 0x77, 0x0a, 0x70, 0xbd, 0x43, 0xd8, 0x05, 0x34, 0x02,
	0xf4, 0x26, 0x18, 0x73, 0xc3, 0x36, 0x7a, 0xad, 0xd3, 0x03, 0xa7, 0x44, 0x3b, 0x39, 0x3a, 0x24,
	0xcc, 0xdd, 0xe2, 0xcc, 0x86, 0x16, 0x75, 0x1a, 0x7a, 0x2a, 0x40, 0xc5, 0x2b, 0x76, 0xb5, 0xd7,
	0x76, 0x8b, 0x51, 0xf7, 0xad, 0x02, 0x9d, 0xfd, 0xe7, 0xec, 0x08, 0xfe, 0x8e, 0xe5, 0x64, 0x75,
	0x87, 0xf1, 0x2c, 0x42, 0x57, 0x4a, 0x4d, 0x7d, 0xdb, 0xee, 0x5e, 0xca, 0x38, 0x34, 0xfd, 0xc0,
	0x0b, 0xc5, 0x68, 0xc0, 0x2b, 0x04, 0x64, 0x25, 0x3b, 0x86, 0xce, 0x22, 0xc6, 0x65, 0x28, 0x13,
	0x75, 0x93, 0x44, 0x51, 0xda, 0x8c, 0x57, 0x09, 0xf9, 0x91, 0xb3, 0x73, 0xf8, 0x9f, 0x65, 0xb7,
	0x58, 0x6c, 0x5a, 0xa3, 0x07, 0xbf, 0x5f, 0xa6, 0xa3, 0x8d, 0x37, 0xbf, 0x1c, 0x4e, 0x03, 0xcd,
	0xeb, 0xb6, 0xd1, 0x33, 0xdd, 0x62, 0xc4, 0x0e, 0xc1, 0xa4, 0xf2, 0x1e, 0x9f, 0x12, 0x14, 0x3e,
	0xf2, 0x06, 0x31, 0xe5, 0x90, 0x59, 0x00, 0xe4, 0xe3, 0x4a, 0x26, 0x42, 0xf3, 0x26, 0x21, 0x85,
	0xa4, 0xfb, 0x62, 0xc0, 0xbf, 0x5c, 0x10, 0x9d, 0x18, 0x83, 0x5a, 0x90, 0x4e, 0xb4, 0xb1, 0x42,
	0x67, 0x52, 0xfd, 0xac, 0x31, 0x16, 0x5e, 0x34, 0x1a, 0xe4, 0xaa, 0xf3, 0x88, 0x6c, 0x49, 0xa1,
	0x51, 0xe8, 0xad, 0x8a, 0xac, 0x4c, 0x6f, 0x96, 0x18, 0xab, 0x50, 0x0a, 0x9a, 0xd9, 0x74, 0xb3,
	0xb2, 0x68, 0xb8, 0x5e, 0x32, 0xdc, 0xbf, 0x7c, 0x5f, 0x5b, 0xc6, 0xc7, 0xda, 0x32, 0x3e, 0xd7,
	0x96, 0xf1, 0xfa, 0x65, 0xfd, 0x01, 0xdb, 0x97, 0x73, 0xe7, 0xd1, 0xf3, 0xf5, 0xee, 0x33, 0x29,
	0xef, 0xc9, 0x43, 0x79, 0xc9, 0xc6, 0x0d, 0x5a, 0xbd, 0xb3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd6, 0x03, 0xa4, 0xb6, 0x9c, 0x02, 0x00, 0x00,
}

func (m *EntryBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntryBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EntryHashes) > 0 {
		for iNdEx := len(m.EntryHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EntryHashes[iNdEx])
			copy(dAtA[i:], m.EntryHashes[iNdEx])
			i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.EntryHashes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntryBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntryBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntryBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EntryCount != 0 {
		i = encodeVarintEntryBlock(dAtA, i, uint64(m.EntryCount))
		i--
		dAtA[i] = 0x38
	}
	if m.BlockSequence != 0 {
		i = encodeVarintEntryBlock(dAtA, i, uint64(m.BlockSequence))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEntryBlock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PreviousKeyMerkleRoot) > 0 {
		i -= len(m.PreviousKeyMerkleRoot)
		copy(dAtA[i:], m.PreviousKeyMerkleRoot)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.PreviousKeyMerkleRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PreviousFullHash) > 0 {
		i -= len(m.PreviousFullHash)
		copy(dAtA[i:], m.PreviousFullHash)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.PreviousFullHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BodyMerkleRoot) > 0 {
		i -= len(m.BodyMerkleRoot)
		copy(dAtA[i:], m.BodyMerkleRoot)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.BodyMerkleRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EntryBlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntryBlockEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntryBlockEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Version != 0 {
		i = encodeVarintEntryBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExternalIDs) > 0 {
		for iNdEx := len(m.ExternalIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExternalIDs[iNdEx])
			copy(dAtA[i:], m.ExternalIDs[iNdEx])
			i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.ExternalIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintEntryBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntryBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntryBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EntryBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	if len(m.EntryHashes) > 0 {
		for _, b := range m.EntryHashes {
			l = len(b)
			n += 1 + l + sovEntryBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BodyMerkleRoot)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	l = len(m.PreviousFullHash)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	l = len(m.PreviousKeyMerkleRoot)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEntryBlock(uint64(m.BlockHeight))
	}
	if m.BlockSequence != 0 {
		n += 1 + sovEntryBlock(uint64(m.BlockSequence))
	}
	if m.EntryCount != 0 {
		n += 1 + sovEntryBlock(uint64(m.EntryCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EntryBlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	if len(m.ExternalIDs) > 0 {
		for _, b := range m.ExternalIDs {
			l = len(b)
			n += 1 + l + sovEntryBlock(uint64(l))
		}
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEntryBlock(uint64(m.Version))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovEntryBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEntryBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntryBlock(x uint64) (n int) {
	return sovEntryBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EntryBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &EntryBlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryHashes = append(m.EntryHashes, make([]byte, postIndex-iNdEx))
			copy(m.EntryHashes[len(m.EntryHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyMerkleRoot = append(m.BodyMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyMerkleRoot == nil {
				m.BodyMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousFullHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousFullHash = append(m.PreviousFullHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousFullHash == nil {
				m.PreviousFullHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousKeyMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousKeyMerkleRoot = append(m.PreviousKeyMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.PreviousKeyMerkleRoot == nil {
				m.PreviousKeyMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSequence", wireType)
			}
			m.BlockSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSequence |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryCount", wireType)
			}
			m.EntryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EntryBlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntryBlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntryBlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIDs = append(m.ExternalIDs, make([]byte, postIndex-iNdEx))
			copy(m.ExternalIDs[len(m.ExternalIDs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEntryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntryBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntryBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntryBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntryBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntryBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntryBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntryBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntryBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntryBlock = fmt.Errorf("proto: unexpected end of group")
)
