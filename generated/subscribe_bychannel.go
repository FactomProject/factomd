// Start fileheader template
// Code generated by go generate; DO NOT EDIT.
// This file was generated by FactomGenerate robots

// Start Generated Code

package generated

import (
	. "github.com/FactomProject/factomd/common/pubsubtypes"
	. "github.com/FactomProject/factomd/pubsub"
)

// End fileheader template

// Start subscribeBychannel generated go code

// SubChannel subscriber has the basic necessary function implementations. All this does is add a wrapper with typing.
type Subscribe_ByChannel_IMsg_type struct {
	*SubChannel
}

// type the Read function
func (s *Subscribe_ByChannel_IMsg_type) Read() IMsg {
	return s.SubChannel.Read().(IMsg) // cast the return to the specific type
}

// type the ReadWithInfo function
func (s *Subscribe_ByChannel_IMsg_type) ReadWithInfo() (IMsg, bool) {
	v, ok := <-s.Updates
	return v.(IMsg), ok
}

// Create a typed instance form a generic instance
func Subscribe_ByChannel_IMsg(p *SubChannel) *Subscribe_ByChannel_IMsg_type {
	return &Subscribe_ByChannel_IMsg_type{p}
}

// End subscribe_bychannel generated code
//
// Start subscribeBychannel generated go code

// SubChannel subscriber has the basic necessary function implementations. All this does is add a wrapper with typing.
type Subscribe_ByChannel_DBHT_type struct {
	*SubChannel
}

// type the Read function
func (s *Subscribe_ByChannel_DBHT_type) Read() DBHT {
	return s.SubChannel.Read().(DBHT) // cast the return to the specific type
}

// type the ReadWithInfo function
func (s *Subscribe_ByChannel_DBHT_type) ReadWithInfo() (DBHT, bool) {
	v, ok := <-s.Updates
	return v.(DBHT), ok
}

// Create a typed instance form a generic instance
func Subscribe_ByChannel_DBHT(p *SubChannel) *Subscribe_ByChannel_DBHT_type {
	return &Subscribe_ByChannel_DBHT_type{p}
}

// End subscribe_bychannel generated code
//
// Start subscribeBychannel generated go code

// SubChannel subscriber has the basic necessary function implementations. All this does is add a wrapper with typing.
type Subscribe_ByChannel_Hash_type struct {
	*SubChannel
}

// type the Read function
func (s *Subscribe_ByChannel_Hash_type) Read() Hash {
	return s.SubChannel.Read().(Hash) // cast the return to the specific type
}

// type the ReadWithInfo function
func (s *Subscribe_ByChannel_Hash_type) ReadWithInfo() (Hash, bool) {
	v, ok := <-s.Updates
	return v.(Hash), ok
}

// Create a typed instance form a generic instance
func Subscribe_ByChannel_Hash(p *SubChannel) *Subscribe_ByChannel_Hash_type {
	return &Subscribe_ByChannel_Hash_type{p}
}

// End subscribe_bychannel generated code
//
// Start subscribeBychannel generated go code

// SubChannel subscriber has the basic necessary function implementations. All this does is add a wrapper with typing.
type Subscribe_ByChannel_CommitRequest_type struct {
	*SubChannel
}

// type the Read function
func (s *Subscribe_ByChannel_CommitRequest_type) Read() CommitRequest {
	return s.SubChannel.Read().(CommitRequest) // cast the return to the specific type
}

// type the ReadWithInfo function
func (s *Subscribe_ByChannel_CommitRequest_type) ReadWithInfo() (CommitRequest, bool) {
	v, ok := <-s.Updates
	return v.(CommitRequest), ok
}

// Create a typed instance form a generic instance
func Subscribe_ByChannel_CommitRequest(p *SubChannel) *Subscribe_ByChannel_CommitRequest_type {
	return &Subscribe_ByChannel_CommitRequest_type{p}
}

// End subscribe_bychannel generated code
//
// Start filetail template
// Code generated by go generate; DO NOT EDIT.
// End filetail template
// End Generated Code
