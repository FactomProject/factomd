// Copyright 2017 Factom Foundation
// Use of this source code is governed by the MIT
// license that can be found in the LICENSE file.

package state_test

import (
	"fmt"
	"github.com/FactomProject/factomd/common/entryBlock"
	"github.com/FactomProject/factomd/common/interfaces"
	"github.com/FactomProject/factomd/common/messages"
	"github.com/FactomProject/factomd/common/primitives"
	"github.com/FactomProject/factomd/common/primitives/random"
	. "github.com/FactomProject/factomd/state"
	"github.com/FactomProject/factomd/testHelper"
	"testing"
)

var fs interfaces.IFactoidState

func randomBytes() *primitives.ByteSlice {
	bs := new(primitives.ByteSlice)
	bs.Bytes = random.RandByteSliceOfLen(64)
	return bs
}

// Create a new chain, return the ChainID
func newChain(s *State, dbheight uint32) (chainID interfaces.IHash) {

	msg := messages.NewRevealEntryMsg()
	e := entryBlock.NewEntry()
	msg.Entry = e
	e.ExtIDs = append(e.ExtIDs, *randomBytes())
	e.ChainID = entryBlock.NewChainID(e)
	e.Content = *randomBytes()

	eb := entryBlock.NewEBlock()
	// Set the Chain ID
	eb.GetHeader().SetChainID(e.ChainID)
	// Set the Directory Block Height for this Entry Block
	eb.GetHeader().SetDBHeight(dbheight)
	// Add our new entry
	eb.AddEBEntry(msg.Entry)
	// Put it in our list of new Entry Blocks for this Directory Block
	s.PutNewEBlocks(dbheight, e.ChainID, eb)
	s.PutNewEntries(dbheight, e.GetHash(), msg.Entry)

	return e.ChainID
}

// Add a entry to a chain
func newEntry(s *State, dbheight uint32, chainID interfaces.IHash) {
	fmt.Println("Start")
	msg := messages.NewRevealEntryMsg()
	e := entryBlock.NewEntry()
	msg.Entry = e
	e.ChainID = chainID
	fmt.Println("Random")
	e.Content = *randomBytes()
	fmt.Println("Get new blocks")

	eb := s.GetNewEBlocks(dbheight, chainID)
	fmt.Println("one step")
	eb_db := s.GetNewEBlocks(dbheight-1, chainID)
	fmt.Println("Okay, is nil?")
	if eb_db == nil {
		fmt.Println("Block Head")
		eb_db, _ = s.DB.FetchEBlockHead(chainID)
	}
	if eb == nil {
		eb = entryBlock.NewEBlock()
		eb.GetHeader().SetEBSequence(eb_db.GetHeader().GetEBSequence() + 1)
		eb.GetHeader().SetPrevFullHash(eb_db.GetHash())
		// Set the Chain ID
		eb.GetHeader().SetChainID(chainID)
		// Set the Directory Block Height for this Entry Block
		eb.GetHeader().SetDBHeight(dbheight)
		// Set the PrevKeyMR
		key, _ := eb_db.KeyMR()
		eb.GetHeader().SetPrevKeyMR(key)
	}
	// Add our new entry
	eb.AddEBEntry(msg.Entry)
	// Put it in our list of new Entry Blocks for this Directory Block
	fmt.Println("put new stuff")
	s.PutNewEBlocks(dbheight, chainID, eb)
	s.PutNewEntries(dbheight, e.GetHash(), msg.Entry)
}

func TestEntryReads(t *testing.T) {
	s := testHelper.CreateAndPopulateTestState()
	fmt.Println("Saved: ", s.GetHighestSavedBlk())
	fmt.Println("1")
	for i := 0; i < 1; i++ {
		fmt.Println("2")
		chainID := newChain(s, 1)
		for i := 0; i < 1; i++ {
			fmt.Println("3")
			newEntry(s, 1, chainID)
		}
	}

	PrintState(s)
}
